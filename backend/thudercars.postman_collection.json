{
	"info": {
		"_postman_id": "8c565dd8-51cc-4e67-8454-5f4bb486edaa",
		"name": "thudercars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33867374",
		"_collection_link": "https://orange-firefly-679046.postman.co/workspace/New-Team-Workspace~be90464f-ddf1-46d3-8cee-ff017bf30016/collection/33867374-8c565dd8-51cc-4e67-8454-5f4bb486edaa?action=share&source=collection_link&creator=33867374"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "AllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>ID</th>",
									"        <th>Email</th>",
									"        <th>Phone</th>",
									"        <th>Fullname</th>",
									"        <th>City</th>",
									"        <th>Role Name</th>",
									"    </tr>",
									"    ",
									"    {{#each response}}",
									"        <tr id=row_{{@key}}>",
									"            <td>{{id}}</td>",
									"            <td>{{email}}</td>",
									"            <td>{{phone}}</td>",
									"            <td>{{fullname}}</td>",
									"            <td>{{city}}</td>",
									"            <td>{{role.roleName}}</td>",
									"        </tr>",
									"    {{/each}}",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    var res = pm.response.json();",
									"",
									"    var visualizerData = res.map((user) => {",
									"        return {",
									"            id: user.id,",
									"            email: user.email,",
									"            phone: user.phone,",
									"            fullname: user.fullname,",
									"            city: user.city,",
									"            role: {",
									"                roleName: user.role.roleName",
									"            }",
									"        };",
									"    });",
									"",
									"    return {response: visualizerData};",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.email).to.be.a('string').and.to.match(/^\\S+@\\S+\\.\\S+$/, \"Email is not in a valid format\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Date of Birth is in valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Date of birth is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Role ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.roleId).to.be.a('number').and.to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').and.not.to.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/12",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserByEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/email/mukundshukla00@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"email",
								"mukundshukla00@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Date of birth is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date of birth is not in valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Role ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.roleId).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.roleId).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"1234567230\",\r\n    \"fullname\": \"Mukund Shukla\",\r\n    \"dateOfBirth\": \"2001-02-02\",\r\n    \"city\": \"Gorakhpur\",\r\n    \"password\": \"Mukhnd234\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"MukundShukla\",\r\n    \"roleId\":2\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/update/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"update",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserByRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"var template = `",
									"<div>",
									"    <h2>No Users Found</h2>",
									"    <p>Status Code: {{response.statusCode}}</p>",
									"    <p>Error Message: {{response.message}}</p>",
									"</div>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return { response: pm.response.json() };",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"1234567230\",\r\n    \"fullname\": \"Mukund Shukla\",\r\n    \"dateOfBirth\": \"2001-02-02\",\r\n    \"city\": \"Gorakhpur\",\r\n    \"password\": \"Mukhnd234\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"MukundShukla\",\r\n    \"roleId\":2\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/role/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"role",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Email</th>\r",
									"        <th>Phone</th>\r",
									"        <th>Full Name</th>\r",
									"        <th>Role Name</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.id}}</td>\r",
									"        <td>{{response.email}}</td>\r",
									"        <td>{{response.phone}}</td>\r",
									"        <td>{{response.fullname}}</td>\r",
									"        <td>{{response.role.roleName}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"1234507230\",\r\n    \"fullname\": \"Mukund Shukla\",\r\n    \"dateOfBirth\": \"2001-02-02\",\r\n    \"city\": \"Gorakhpur\",\r\n    \"password\": \"Mukhnd234\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"MukundShukla\",\r\n    \"email\": \"mukundshukla12@gmail.com\",\r\n    \"role\":{\r\n        \"id\":2\r\n    }\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/users/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "home",
			"item": [
				{
					"name": "Homepage",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"mukundshukla043@gmail.com\",\r\n    \"phone\": \"1234567890\",\r\n    \"fullname\": \"Mukund Shukla\",\r\n    \"dateOfBirth\": \"2001-02-02\",\r\n    \"city\": \"Gorakhpur\",\r\n    \"password\": \"Mukhnd234\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"MukundShukla\",\r\n    \"roleId\":3\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/home",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"home"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cars",
			"item": [
				{
					"name": "CreateCar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 405\", function () {",
									"  pm.expect(pm.response.code).to.equal(405);",
									"});",
									"",
									"",
									"pm.test(\"Timestamp is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.timestamp).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Error message is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"BMW m3\",\r\n    \"dealer\": {\r\n        \"id\":1\r\n    },\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllCars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'createdAt' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(car) {",
									"        pm.expect(car.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"The price field should be a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(car) {",
									"        pm.expect(car.price).to.be.a('number');",
									"        pm.expect(car.price).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'dealer' object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(car) {",
									"        pm.expect(car.dealer).to.exist.and.to.be.an('object');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"BMW m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCarById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero number\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').and.to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"BMW m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCarById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"BMW m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCarById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Car name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.carName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"Deposit should be a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.deposit).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"pm.test(\"The 'dealer' object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.dealer).to.exist;",
									"",
									"    pm.test(\"The 'dealer' object contains the expected fields\", function () {",
									"        const dealer = responseData.dealer;",
									"",
									"        pm.expect(dealer.dealerName).to.exist;",
									"        pm.expect(dealer.email).to.exist;",
									"        pm.expect(dealer.phone).to.exist;",
									"        pm.expect(dealer.roleId).to.exist;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"Audi m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/update/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"update",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "CarsByDealerID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Price should be a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(car) {",
									"    pm.expect(car.price).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"Audi m2\",\r\n    \"dealer\": {\r\n        \"id\": 1\r\n    },\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "GetCarsByModelName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Test for required properties in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    const requiredProperties = [\"price\", \"deposit\", \"mileage\", \"theftProtection\", \"collisionDamage\", \"fullInsurance\", \"additionalDriver\", \"dealerId\"];",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(car) {",
									"        requiredProperties.forEach(function(property) {",
									"            pm.expect(car).to.have.property(property);",
									"        });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"Audi m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/model/audi",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"model",
								"audi"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCarsByPriceRange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a valid integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carName\": \"Audi m2\",\r\n    \"dealerId\": 1,\r\n    \"price\": 15000,\r\n    \"deposit\": 2000,\r\n    \"fuelType\": \"Petrol\",\r\n    \"gearbox\": \"Manual\",\r\n    \"image\": \"image.png\",\r\n    \"seats\": 4,\r\n    \"doors\": 4,\r\n    \"fuelpolicy\": \"AlreadyFilled\",\r\n    \"mileage\": 12,\r\n    \"cancellation\": 1000,\r\n    \"theftProtection\":500,\r\n    \"collisionDamage\": 500,\r\n    \"fullInsurance\": 1000,\r\n    \"additionalDriver\": 2000,\r\n    \"wheelDrive\": \"FWD\",\r\n    \"createdBy\": \"CARDEALER\",\r\n    \"updatedBy\": \"SHIVAMBKL\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cars/price?minPrice=10000&maxPrice=12000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cars",
								"price"
							],
							"query": [
								{
									"key": "minPrice",
									"value": "10000"
								},
								{
									"key": "maxPrice",
									"value": "12000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cardealer",
			"item": [
				{
					"name": "CreateCarDealer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a positive integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.statusCode).to.be.a('number').and.to.be.greaterThan(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dealerName\": \"Mukund\",\r\n    \"email\": \"mukund2@gmail.com\",\r\n    \"phone\": \"9119964642\",\r\n    \"allCities\": \"Gorakhpur\",\r\n    \"avatar\": \"image.png\",\r\n    \"roleId\": 2,\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"Mukund\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cardealer/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cardealer",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCarDealerById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and statusCode\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cardealer/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cardealer",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllCarDealears",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  responseData.forEach(function (dealer) {",
									"    pm.expect(dealer.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cardealer/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cardealer",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCarDealer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is set to application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.email).to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email is not in a valid format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dealerName\": \"Mukund Shukla\",\r\n    \"email\": \"mukund2@gmail.com\",\r\n    \"phone\": \"9119964641\",\r\n    \"allCities\": \"Gorakhpur\",\r\n    \"avatar\": \"image.png\",\r\n    \"roleId\": 2,\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"Mukund\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cardealer/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cardealer",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCarDealerById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has a valid Content-Type header\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'message' field is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'statusCode' field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the statusCode field is a non-zero value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist.and.to.not.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dealerName\": \"Mukund Shukla\",\r\n    \"email\": \"mukund2@gmail.com\",\r\n    \"phone\": \"9119964641\",\r\n    \"allCities\": \"Gorakhpur\",\r\n    \"avatar\": \"image.png\",\r\n    \"roleId\": 2,\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"Mukund\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/cardealer/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"cardealer",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Address",
			"item": [
				{
					"name": "GetAllAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"PickupAddress and dropAddress are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function (address) {",
									"        pm.expect(address.pickupAddress).to.be.a('string').and.to.have.lengthOf.at.least(1, \"PickupAddress should not be empty\");",
									"        pm.expect(address.dropAddress).to.be.a('string').and.to.have.lengthOf.at.least(1, \"DropAddress should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/address",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.createdAt).to.exist;",
									"  pm.expect(responseData.createdBy).to.exist;",
									"  pm.expect(responseData.updatedAt).to.exist;",
									"  pm.expect(responseData.updatedBy).to.exist;",
									"  pm.expect(responseData.id).to.exist;",
									"  pm.expect(responseData.pickupAddress).to.exist;",
									"  pm.expect(responseData.dropAddress).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the createdAt field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"createdAt should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"The createdBy field must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.createdBy).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"The updatedAt field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.updatedAt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickupAddress\": \"Chennai\",\r\n    \"dropAddress\": \"Mumbai\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updataedBy\": \"Mukund\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/address/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"address",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAddressById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist;",
									"  pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.statusCode).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickupAddress\": \"Chennai\",\r\n    \"dropAddress\": \"Mumbai\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updataedBy\": \"Mukund\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/address/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"address",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAddressById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'id' is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Verify that pickupAddress is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pickupAddress).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"pickupAddress should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pickupAddress\": \"Chennai\",\r\n    \"dropAddress\": \"Bangalore\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updataedBy\": \"Mukund\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/address/update/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"address",
								"update",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "CreateRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function() {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response contains an array of objects\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function (role) {",
									"    pm.expect(role).to.be.an('object');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"The id field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(role) {",
									"        pm.expect(role.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"roleName\": \"ADMIN\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/roles/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"roles",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRoleById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.include.all.keys('createdAt', 'createdBy', 'updatedAt', 'updatedBy', 'id', 'roleName');",
									"});",
									"",
									"",
									"pm.test(\"RoleName is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.roleName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/roles/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"roles",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "GetAllBookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response content type\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.has.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/bookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"CreatedAt is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"CreatedAt is not in a valid date format\");",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user.email).to.match(/\\S+@\\S+\\.\\S+/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"Phone number is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.carDeal.phone).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"carDealer\": 1,\r\n    \"userId\": 1,\r\n    \"carId\": 5,\r\n    \"addressId\": 2,\r\n    \"fromDate\": \"2024-03-28\",\r\n    \"toDate\": \"2024-03-30\",\r\n    \"status\": \"paid\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"Mukund\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/bookings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"bookings"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookingById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is not empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-zero integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.statusCode).to.exist.and.to.be.a('number').and.to.not.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/bookings/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"bookings",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phone\": \"1234507238\",\r\n    \"fullname\": \"MukundS\",\r\n    \"dateOfBirth\": \"2001-02-02\",\r\n    \"city\": \"Gorakhpur\",\r\n    \"password\": \"Mukund123@\",\r\n    \"createdBy\": \"Mukund\",\r\n    \"updatedBy\": \"MukundShukla\",\r\n    \"email\": \"user@gmail.com\",\r\n    \"role\": {\r\n        \"id\": 1\r\n    }\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	]
}